name: Jupiter Project Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  TERRAFORM_ACTION: apply
  GITHUB_USERNAME: kncloudproject
  REPOSITORY_NAME: jupiter-project
  WEB_FILE_ZIP: rentzone.zip
  WEB_FILE_UNZIP: rentzone
  FLYWAY_VERSION: 9.8.1

jobs:
  wait_for_approval:
    name: Manual Approval Required
    runs-on: ubuntu-latest
    environment:
      name: approval-gate  # requires manual approval
    steps:
      - name: Awaiting Manual Approval
        run: echo "Waiting for approval from kncloudproject."

  # Configure AWS Credentials 
  configure_aws_credentials:
    name: Configure AWS Credentials
    needs: wait_for_approval
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

          
  # Build AWS Infrastructure
  deploy_aws_infrastructure:
    name: Build AWS Infrastructure
    needs: 
      - configure_aws_credentials
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./iac  # Sets working directory for all steps
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials  # <--- Add this step!
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Run Terraform Initialize
        run: terraform init

      - name: Run Terraform Plan
        run: terraform plan -out=tfplan.out


      - name: Run Terraform Apply/Destroy
        run: terraform ${{ env.TERRAFORM_ACTION }} -auto-approve

      - name: Get Terraform Output Image Name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          IMAGE_NAME_VALUE=$(terraform output -raw image_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "IMAGE_NAME=$IMAGE_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform Output Domain Name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          DOMAIN_NAME_VALUE=$(terraform output -raw domain_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "DOMAIN_NAME=$DOMAIN_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform Output RDS Endpoint
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          RDS_ENDPOINT_VALUE=$(terraform output -raw rds_endpoint | grep -Eo "^[^:]+" | tail -n 1)
          echo "RDS_ENDPOINT=$RDS_ENDPOINT_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output image tag
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          IMAGE_TAG_VALUE=$(terraform output -raw image_tag | grep -Eo "^[^:]+" | tail -n 1)
          echo "IMAGE_TAG=$IMAGE_TAG_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output private data subnet az1 id
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          PRIVATE_DATA_SUBNET_AZ1_ID_VALUE=$(terraform output -raw private_data_subnet_az1_id | grep -Eo "^[^:]+" | tail -n 1)
          echo "PRIVATE_DATA_SUBNET_AZ1_ID=$PRIVATE_DATA_SUBNET_AZ1_ID_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output runner security group id
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          RUNNER_SECURITY_GROUP_ID_VALUE=$(terraform output -raw runner_security_group_id | grep -Eo "^[^:]+" | tail -n 1)
          echo "RUNNER_SECURITY_GROUP_ID=$RUNNER_SECURITY_GROUP_ID_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output task definition name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          TASK_DEFINITION_NAME_VALUE=$(terraform output -raw task_definition_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "TASK_DEFINITION_NAME=$TASK_DEFINITION_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output ecs cluster name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          ECS_CLUSTER_NAME_VALUE=$(terraform output -raw ecs_cluster_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "ECS_CLUSTER_NAME=$ECS_CLUSTER_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output ecs service name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          ECS_SERVICE_NAME_VALUE=$(terraform output -raw ecs_service_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "ECS_SERVICE_NAME=$ECS_SERVICE_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform Output Environment File Name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          ENVIRONMENT_FILE_NAME_VALUE=$(terraform output -raw environment_file_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "ENVIRONMENT_FILE_NAME=$ENVIRONMENT_FILE_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output env file bucket name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          ENV_FILE_BUCKET_NAME_VALUE=$(terraform output -raw env_file_bucket_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "ENV_FILE_BUCKET_NAME=$ENV_FILE_BUCKET_NAME_VALUE" >> $GITHUB_ENV

      - name: Print GITHUB_ENV contents
        run: cat $GITHUB_ENV

    outputs:
      terraform_action: ${{ env.TERRAFORM_ACTION }}
      image_name: ${{ env.IMAGE_NAME }}
      domain_name: ${{ env.DOMAIN_NAME }}
      rds_endpoint: ${{ env.RDS_ENDPOINT }}
      image_tag: ${{ env.IMAGE_TAG }}
      private_data_subnet_az1_id: ${{ env.PRIVATE_DATA_SUBNET_AZ1_ID }}
      runner_security_group_id: ${{ env.RUNNER_SECURITY_GROUP_ID }}
      task_definition_name: ${{ env.TASK_DEFINITION_NAME }}
      ecs_cluster_name: ${{ env.ECS_CLUSTER_NAME }}
      ecs_service_name: ${{ env.ECS_SERVICE_NAME }}
      environment_file_name: ${{ env.ENVIRONMENT_FILE_NAME }}
      env_file_bucket_name: ${{ env.ENV_FILE_BUCKET_NAME }}


# Create ECR Repository
  create_ecr_repository:
    name: Create ECR Repository
    needs: 
      - configure_aws_credentials
      - deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials  # <--- Add this step!
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1
        
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Check if ECR Repository Exists
        env:
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
        run: |
          result=$(aws ecr describe-repositories --repository-names "${{ env.IMAGE_NAME }}" | jq -r '.repositories[0].repositoryName')
          echo "repo_name=$result" >> $GITHUB_ENV
        continue-on-error: true

      - name: Create ECR Repository
        env:
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
          REPO_NAME: ${{ env.repo_name }}

        run: |
          if [ "$REPO_NAME" != "$IMAGE_NAME" ] || [ -z "$REPO_NAME" ]; then
            echo "Repository doesn't exist. Creating $IMAGE_NAME ..."
            aws ecr create-repository --repository-name "$IMAGE_NAME"
          else
            echo "Repository $IMAGE_NAME already exists."
          fi

  build_and_push_image:
    name: Build & Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - create_ecr_repository
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Clone Jupiter Project Repo
        run: |
            git clone https://kncloudproject:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ env.GITHUB_USERNAME }}/${{ env.REPOSITORY_NAME }}.git ./jupiter-project

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

      - name: Build Docker Image from External Repo
        env:
            IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
            IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
        run: |
            docker build -t $IMAGE_NAME:$IMAGE_TAG ./jupiter-project

      - name: Get ECR Registry
        id: ecr
        run: |
            echo "ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV

      - name: Retag Docker Image
        env:
            IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
            IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
        run: |
            docker tag $IMAGE_NAME:$IMAGE_TAG $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Docker Image to Amazon ECR
        env:
            IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
            IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
        run: |
            docker push $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG


# Create new task definition revision
  create_td_revision:
    name: Create New Task Definition Revision
    needs: 
      - configure_aws_credentials
      - deploy_aws_infrastructure 
      - create_ecr_repository
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

      - name: Create new task definition revision
        env:
          ECS_FAMILY: ${{ needs.deploy_aws_infrastructure.outputs.task_definition_name }}
          ECS_IMAGE: ${{ secrets.ECR_REGISTRY }}/${{ needs.deploy_aws_infrastructure.outputs.image_name }}:${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
        run: |
          # Get existing task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_FAMILY }})

          # update the existing task definition by performing the following actions:
          # 1. Update the `containerDefinitions[0].image` to the new image we want to deploy
          # 2. Remove fields from the task definition that are not compatibile with `register-task-definition` --cli-input-json
          NEW_TASK_DEFINITION=$(echo "$TASK_DEFINITION" | jq --arg IMAGE "${{ env.ECS_IMAGE }}" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')

          # Register the new task definition and capture the output as JSON
          NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION")

          # Grab the new revision from the output
          NEW_TD_REVISION=$(echo "$NEW_TASK_INFO" | jq '.taskDefinition.revision')

          # Set the new revision as an environment variable
          echo "NEW_TD_REVISION=$NEW_TD_REVISION" >> $GITHUB_ENV

    outputs:
      new_td_revision: ${{ env.NEW_TD_REVISION }}


  # Restart ECS Fargate service
  restart_ecs_service:
    name: Restart ECS Fargate Service
    needs: 
      - configure_aws_credentials
      - deploy_aws_infrastructure 
      - create_ecr_repository
      - build_and_push_image
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Service
        env:
          ECS_CLUSTER_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_cluster_name }}
          ECS_SERVICE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_service_name }}
          TD_NAME: ${{ needs.deploy_aws_infrastructure.outputs.task_definition_name }}
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER_NAME }} --service ${{ env.ECS_SERVICE_NAME }} --task-definition ${{ env.TD_NAME }}:${{ needs.create_td_revision.outputs.new_td_revision }} --force-new-deployment

      - name: Wait for ECS Service to Become Stable
        env:
          ECS_CLUSTER_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_cluster_name }}
          ECS_SERVICE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_service_name }}
        run: |
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER_NAME }} --services ${{ env.ECS_SERVICE_NAME }}

